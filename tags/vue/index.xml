<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue on Sayoko123f</title><link>https://sayoko123f.github.io/tags/vue/</link><description>Recent content in Vue on Sayoko123f</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Sun, 19 Feb 2023 21:43:55 +0800</lastBuildDate><atom:link href="https://sayoko123f.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml"/><item><title>Vue 3 表單驗證 Vee Vaildate 4 (使用組合式API)</title><link>https://sayoko123f.github.io/p/vue3-vee-vaildate/</link><pubDate>Sun, 19 Feb 2023 21:43:55 +0800</pubDate><guid>https://sayoko123f.github.io/p/vue3-vee-vaildate/</guid><description>Vue 3 表單驗證 Vee Vaildate 4 (使用組合式API) VeeValidDate Docs
本文寫作時使用
Vue 3.2.45 Vite 4.0.0 TypeScript 4.9.3 vee-validate 4.7.4 useField value import { useField } from &amp;#39;vee-validate&amp;#39;; const { value } = useField(&amp;#39;username&amp;#39;); useField 的第一個參數是必填，VeeValidDate 用來辨識欄位的 key。
value 是一個 Ref ，用 v-model 接到 input 上面，value 會跟著使用者輸入改變。
&amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;value&amp;#34;/&amp;gt; errorMessage useField 的第二個參數可以傳入一個函式，每次 value 改變的時候這個函式都會被呼叫，用來驗證 value 符不符合規則，如果符合規則就回傳 true；反之回傳 string 作為 errorMessage。
以下我自訂一個規則函式，驗證 value 的值必須是 foo：
function isFoo(value: string | undefined) { if (value === &amp;#39;foo&amp;#39;) { return true; } return &amp;#39;username must be &amp;#34;foo&amp;#34;!</description></item><item><title>Vue2 Vetur 如何為全域註冊組件增加 IntelliSense</title><link>https://sayoko123f.github.io/p/vue-vetur-global-component-intellisense/</link><pubDate>Sun, 23 Oct 2022 07:14:04 +0800</pubDate><guid>https://sayoko123f.github.io/p/vue-vetur-global-component-intellisense/</guid><description>Vue2 Vetur 如何為全域註冊組件增加 IntelliSense 官方文件
步驟一 在 package.json 告訴 Vetur 要去哪裡讀標籤定義檔，下面範例的路徑定義在 src/vetur 底下：
{ ..., &amp;#34;vetur&amp;#34;: { &amp;#34;tags&amp;#34;: &amp;#34;src/vetur/tags.json&amp;#34;, &amp;#34;attributes&amp;#34;: &amp;#34;src/vetur/attributes.json&amp;#34; } } 步驟二 建立 src/vetur/tags.json ：
{ &amp;#34;foo-bar&amp;#34;: { &amp;#34;description&amp;#34;: &amp;#34;A foo tag&amp;#34;, &amp;#34;attributes&amp;#34;: [&amp;#34;foo-attr&amp;#34;] } } 建立 src/vetur/attributes.json ：
{ &amp;#34;foo-bar/foo-attr&amp;#34;: { &amp;#34;description&amp;#34;: &amp;#34;description of foo-attr&amp;#34; } } 步驟三 重新啟動 VS Code
大功告成✨</description></item><item><title>Vite + Vue + TypeScript + Tailwindcss 起手式</title><link>https://sayoko123f.github.io/p/vite-vue-typescript-tailwindcss-template/</link><pubDate>Sat, 30 Apr 2022 16:32:38 +0800</pubDate><guid>https://sayoko123f.github.io/p/vite-vue-typescript-tailwindcss-template/</guid><description>Vite + Vue + TypeScript + Tailwindcss 起手式 文件 本筆記提到的 Vue 與 Vue 插件都為 Vue 3!
create-vite
Tailwindcss install guide
tsconfig
指令 使用 create-vite 安裝 vue-ts 模板
npm create vite@latest my-vue-app -- --template vue-ts cd my-vue-app npm install 安裝 Tailwind
npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p Tailwindcss 設定檔案 tailwind.config.cjs
/** @type {import(&amp;#39;tailwindcss&amp;#39;).Config} */ module.exports = { content: [ &amp;#34;./index.html&amp;#34;, &amp;#34;./src/**/*.{js,ts,vue}&amp;#34;, ], theme: { extend: {}, }, plugins: [], } 建立 .</description></item><item><title>在 Vue 中 data, method, computed 的使用時機</title><link>https://sayoko123f.github.io/p/vue-using-data-method-or-computed/</link><pubDate>Wed, 22 Sep 2021 13:59:40 +0800</pubDate><guid>https://sayoko123f.github.io/p/vue-using-data-method-or-computed/</guid><description>在 Vue 中 data, method, computed 的使用時機 資料(Data)和方法(Method)以及計算屬性(computed)是 Vue 物件中常常用來存放資料的地方，然而什麼時候該用哪一種，是在剛開始學的時候會疑惑的一個問題，以下對這三者做整理分析：
比較 // Example in component export default { data: () =&amp;gt; ({ nums: [1, 2, 3, 4] }), computed: { sumNums() { return this.nums.reduce((acc, cur)=&amp;gt; acc + cur); } }, methods: { multNums(n) { return this.nums.map(e=&amp;gt; e * n); } } }; Data 資料 Data 物件很單純，適合用來放資料，以供後續其他地方使用。
Computed 計算屬性 Computed 計算屬性比較特別，它的性質介於 Data 和 Method 之間，在宣告的時候它長得像函式，但使用的時候不用加小括號。</description></item></channel></rss>